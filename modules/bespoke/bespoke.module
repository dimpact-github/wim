<?php

define('DIMPACT_VERSION', '1.17');

/**
 * Implements hook_init().
 *
 * Add SSL cookie if not present.
 */
function bespoke_init() {
  global $is_https;

  // Unconditional https redirects or a Secure Pages based solution is used.
  if ($is_https && empty($_COOKIE['ssl']) && module_exists('securepages')) {
    // Set a marker to know that the user is logged in via SSL.
    $params = session_get_cookie_params();
    $expire = $params['lifetime'] ? REQUEST_TIME + $params['lifetime'] : 0;
    setcookie('ssl', 1, $expire, $params['path'], $params['domain'], FALSE, TRUE);
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function bespoke_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['overig_onderwerp'] = array(
    'label' => t('Overig onderwerp'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['slide_93'] = array(
    'label' => t('Carrousel slide 9/3'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['slide_412'] = array(
    'label' => t('Carrousel slide 4/12'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['banner'] = array(
    'label' => t('Banner'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['origineel'] = array(
    'label' => t('Origineel'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['volle_breedte'] = array(
    'label' => t('Volle breedte'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['portret'] = array(
    'label' => t('Portret'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['slide_1_3'] = array(
    'label' => t('Slide 4/12'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['slide_2_3'] = array(
    'label' => t('Slide 8/12'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['slide_1_4'] = array(
    'label' => t('Slide 3/12'),
    'custom settings' => TRUE,
  );

  $entity_info['file']['view modes']['slide_3_4'] = array(
    'label' => t('Slide 9/12'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['volle_breedte'] = array(
    'label' => t('Volle breedte'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['slide_412'] = array(
    'label' => t('Slide 4/12'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['slide_812'] = array(
    'label' => t('Slide 8/12'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['slide_312'] = array(
    'label' => t('Slide 3/12'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['slide_912'] = array(
    'label' => t('Slide 9/12'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function bespoke_module_implements_alter(&$data, $hook) {
  if ($hook == 'page_alter') {
    // We have a custom check whether or not to show piwik/ga. So this is
    // handled in bespoke_page_alter().
    unset($data['piwik']);
    unset($data['googleanalytics']);
  }
}

/**
 * Implements hook_page_alter().
 */
function bespoke_page_alter(&$page) {
  if (dominion_has_function('piwik') && module_exists('piwik')) {
    piwik_page_alter($page);
  }
  if (dominion_has_function('googleanalytics') && module_exists('googleanalytics')) {
    googleanalytics_page_alter($page);
  }
  // if on node and on subscribe, hide the node content
  if (arg(0) == 'node' && arg(2) == 'subscribe') {
    $page['content']['system_main']['nodes'][arg(1)]['body'][0]['#markup'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bespoke_form_subscriptions_ui_node_form_alter(&$form, &$form_state) {
  unset($form['wrapper']['#type']);
  unset($form['wrapper']['#theme']);
  unset($form['wrapper']['footer']);
}

/**
 * Function for retrieving terms. If a term does not exist adds it.
 *
 * @param $name Name of the term.
 * @param $voc_name Machine name of the vocabulary
 */
function bespoke_get_term_id($name, $voc_name) {
  $term_match = taxonomy_get_term_by_name($name, $voc_name);
  if (!empty($term_match)) {
    $term = reset($term_match);
  }
  else {
    $voc = taxonomy_vocabulary_machine_name_load($voc_name);

    $term = new stdClass();
    $term->name = $name;
    $term->vid = $voc->vid;
    taxonomy_term_save($term);

    if (module_exists('domain_taxonomy')) {
      // domain_taxonomy always expects the terms source domain.
      $default_domain = domain_default();
      $term->domain_source = $default_domain['domain_id'];

      // allow access to all affiliates.
      $term->domain_site = TRUE;

      // Domain Taxonomy doesnt use hooks for loading / adding additional
      // data. Instead it alters the form and adds some custom fucntionality.
      // We have to do this ourselfs or else the terms willl not show.
      domain_taxonomy_save_term($term);
    }
  }

  return $term;
}

/**
 * Implements hook_apachesolr_search_page_alter().
 *
 * Only show suggestions when current search does not contain results.
 */
function bespoke_apachesolr_search_page_alter(array &$build, array $search_page) {
  if (isset($build['suggestions'])) {
    if (substr($build['search_results']['#markup'], 0, 3) != '<ul') {
      unset($build['suggestions']);
    }
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Make the forum only accessible on the main domain.
 */
function bespoke_menu_alter(&$menu) {
  $menu['forum']['access callback'] = 'bespoke_forum_access';
  $menu['forum']['access arguments'] = array();

  // https://dutchopen.unfuddle.com/a#/projects/136/tickets/by_number/594
  if (module_exists('file_entity') && module_exists('workbench')) {
    $menu['admin/workbench/file/add'] = $menu['file/add'];
    unset($menu['file/add']);
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function bespoke_menu_link_alter(&$link) {
  // Clear the menu cache once (issue #185).
  $cleared = drupal_static(__FUNCTION__, FALSE);
  if (!$cleared) {
    menu_cache_clear_all();
    $cleared = TRUE;
  }
}

/**
 * Access callback for forum.
 */
function bespoke_forum_access() {
  global $_domain;
  return $_domain['domain_id'] == 1;
}

/**
 * Implements hook_token_info().
 */
function bespoke_token_info() {
  $info = array(
    'tokens' => array(
      'node' => array(
        'event-year' => array(
          'name' => t('Event year'),
          'description' => t('The year of the event.'),
          'type' => 'node',
        ),
        'event-month' => array(
          'name' => t('Event month'),
          'description' => t('The month of the event.'),
          'type' => 'node',
        ),
        'event-day' => array(
          'name' => t('Event day'),
          'description' => t('The day of the event.'),
          'type' => 'node',
        ),
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function bespoke_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type === 'node' && isset($data['node']) && !empty($data['node'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'event-year':
        case 'event-month':
        case 'event-day':
          $formats = array(
            'event-year' => 'Y',
            'event-month' => 'n',
            'event-day' => 'j',
          );
          if (!empty($data['node']->field_date) && !empty($data['node']->field_date[LANGUAGE_NONE][0]['value'])) {
            $timestamp = strtotime($data['node']->field_date[LANGUAGE_NONE][0]['value']);
          }
          else {
            $timestamp = $data['node']->created;
          }
          $replacements[$original] = format_date($timestamp, 'custom', $formats[$name]);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_hansel_action_types().
 */
function bespoke_hansel_action_types() {
  return array(
    'add wiki page' => array(
      'get crumbs' => 'bespoke_action_add_wiki_page_get_crumbs',
      'file' => 'bespoke.hansel.inc',
    ),
  );
}

function bespoke_admin_paths_alter(&$paths) {
  // Treat all user pages as not administrative.
  $paths['user/*'] = FALSE;
}


// added by maarten hartman
// implements a form in which the user can set a readspeaker ID
/**
 * Implements hook_menu().
 */
function bespoke_menu() {

  $items['admin/config/dimpact/readspeaker'] =  array(
    'title' => t('Readspeaker settings'),
    'description' => t('Readspeaker settings for the Dimpact Drupal CMS'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bespoke_settings_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback for settings page.
 */
function bespoke_settings_form($form, &$form_state) {
  $form = array(
    'bespoke_readspeaker_status' => array(
      '#type' => 'select',
      '#title' => t('Readspeaker status'),
      '#options' => array(
        0 => t('Deactivated'),
        1 => t('Activated'),
      ),
      '#default_value' => variable_get('bespoke_readspeaker_status', 0),
    ),
    'bespoke_readspeaker_id' => array(
      '#type' => 'textfield',
      '#title' => t('Readspeaker ID'),
      '#default_value' => variable_get('bespoke_readspeaker_id', '01234'),
    ),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bespoke_form_menu_edit_item_alter(&$form, &$form_state) {
  if (module_exists('linkit')) {
    $profile_name = variable_get('bespoke_menu_linkit_profile', 'menu_links');
    $profile = linkit_profile_load($profile_name);
    $profile_insert_plugin_name = $profile->data['insert_plugin']['plugin'];
    $insert_plugin = linkit_insert_plugin_load($profile_insert_plugin_name);

    // Setup the field id.
    $field_id = 'edit-link-path';

    $field_js = array(
      'data' => array(
        'linkit' => array(
          'fields' => array(
            $field_id => array(
              'profile' => $profile_name,
              'insert_plugin' => $profile_insert_plugin_name,
            ),
          ),
        ),
      ),
      'type' => 'setting',
    );

    // Attach js files and settings Linkit needs.
    $form['link_path']['#attached']['library'][] = array('linkit', 'base');
    $form['link_path']['#attached']['library'][] = array('linkit', 'field');
    $form['link_path']['#attached']['js'][] = $insert_plugin['javascript'];
    $form['link_path']['#attached']['js'][] = $field_js;
    $form['link_path']['#field_suffix'] = '<a class="button linkit-field-button linkit-field-' . $field_id . '" href="#">' . t('Search') . '</a>';
  }
}

/**
 * Clear page caches of pages displaying this nodetype (issue #231).
 *
 * @param string $type
 */
function bespoke_clear_node_cache($type) {
  if (in_array($type, array('announcement', 'regulation', 'product', 'vac'))) {
    cache_clear_all('*', 'cache_page', TRUE);
  }
}

/**
 * Implements hook_node_insert().
 */
function bespoke_node_insert($node) {
  bespoke_clear_node_cache($node->type);
}

/**
 * Implements hook_node_update().
 */
function bespoke_node_update($node) {
  bespoke_clear_node_cache($node->type);
}

/**
 * Implements hook_node_delete().
 */
function bespoke_node_delete($node) {
  bespoke_clear_node_cache($node->type);
}

/**
 * Implements hook_hansel_menus_alter().
 *
 * Filter the list of menu's to contain only the menu's displayed on the current subsite.
 */
function bespoke_hansel_menus_alter(&$menus) {
  if ($subsite = dominion_get_info()) {
    $menus = array();
    foreach ($subsite->menus as $menu) {
      $menus[] = $menu->menu_name;
    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function bespoke_taxonomy_term_insert($term) {
  bespoke_save_tag_alias($term);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function bespoke_taxonomy_term_update($term) {
  bespoke_save_tag_alias($term);
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function bespoke_taxonomy_term_delete($term) {
  if ($term->vocabulary_machine_name == 'tags') {
    db_delete('url_alias')
      ->condition('source', 'foto-album/tag/' . $term->tid)
      ->execute();
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function bespoke_save_tag_alias($term) {
  if ($term->vocabulary_machine_name == 'tags') {
    module_load_include('inc', 'pathauto');
    $dst = 'fotoalbums/' . pathauto_clean_alias($term->name);
    $new = new stdClass();
    $new->source = 'foto-album/tag/' . $term->tid;
    $new->alias = $dst;
    $new->language = LANGUAGE_NONE;
    $old = db_select('url_alias', 'ua')
      ->fields('ua', array('pid', 'alias'))
      ->condition('ua.source', $new->source)
      ->condition('ua.language', $new->language)
      ->execute()
      ->fetch();

    if ($old && $old->alias != $new->alias) {
      // An alias already exists, but is different from the new alias.
      $new->pid = $old->pid;
      drupal_write_record('url_alias', $new, array('pid'));
      drupal_path_alias_whitelist_rebuild($new->alias);
    }
    elseif (!$old) {
      // There is no old alias. Create a new one.
      drupal_write_record('url_alias', $new);
      drupal_path_alias_whitelist_rebuild($new->alias);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function bespoke_views_query_alter(&$view, &$query) {
  if ($view->name == 'inhoud_zoeken') {
    foreach ($query->where[1]['conditions'] as $cid => $condition) {
      $conjunction = 'AND';
      $values = array();
      if (is_object($condition['field'])) {
        $conditions = $condition['field']->conditions();
        $conjuction = $conditions['#conjunction'];
        $field = '';
        $values = array();
        foreach ($conditions as $sub) {
          if (is_array($sub)) {
            $operator = $sub['operator'];
            $field = $sub['field'];
            $values[] = $sub['value'];
          }
        }
      }
      else {
        $operator = $condition['operator'];
        $field = $condition['field'];
        $values = array($condition['value']);
      }
      if ($field == 'field_data_body.body_value') {
        $or = array();
        foreach (array('field_data_body.body_value', 'node.title') as $field) {
          $sub = array();
          foreach ($values as $value) {
            $value = addslashes($value);
            $sub[] = "$field $operator '$value'";
          }
          $or[] = implode(" $conjuction ", $sub);
        }
        $expression = '(' . implode(') OR (', $or) . ')';
        $query->where[1]['conditions'][$cid] = array(
          'field' => $expression,
          'value' => array(),
          'operator' => 'formula',
        );
      }
    }
  }
}

/**
 * Implements hook_apachesolr_exclude
 *
 * Do not index nodes with 50MB or more attached.
 */
function bespoke_apachesolr_exclude($entity_id, $entity_type, $row, $env_id) {
  if ($entity_type == 'node') {
    $result = db_query('SELECT SUM(managed.filesize) total_filesize FROM {file_managed} managed, {file_usage} file_usage WHERE file_usage.id=:nid AND managed.fid=file_usage.fid', array(':nid' => $entity_id));
    foreach($result as $record) {
      if ($record->total_filesize > variable_get('bespoke_apachesolr_max_attachments_size', 50000000)) {
        return TRUE;
      }
    }
  }
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function bespoke_file_mimetype_mapping_alter(&$mapping) {
  // Add support for msg.
  $new_mappings['msg'] = 'application/vnd.ms-outlook';

  foreach ($new_mappings as $extension => $mime_type) {
    if (!in_array($mime_type, $mapping['mimetypes'])) {
      // If the mime type does not already exist, add it.
      $mapping['mimetypes'][] = $mime_type;
    }

    // Get the index of the mime type and assign the extension to that key.
    $index = array_search($mime_type, $mapping['mimetypes']);
    $mapping['extensions'][$extension] = $index;
  }
}

/**
 * Implements hook_file_view_alter.
 * Removed media container div that breaks p-tags in the WYSIWYG.
 * @see https://www.drupal.org/node/2357993#comment-10328301
 * @param type $build
 * @param type $type
 */
function bespoke_file_view_alter(&$build, $type) {
  if ($build['#bundle'] === 'image') {
    unset($build['links']);
  }
}
